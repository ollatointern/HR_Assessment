import { useEffect, useState } from "react";
import axios from "axios";
import { jsPDF } from "jspdf";
import Sidebar from "../components/Sidebar";
import DashboardHeader from "../constants/DashboardHeader";

const DownloadSummary = () => {
  const [results, setResults] = useState({});
  const userResult = JSON.parse(localStorage.getItem("user"));
  const userId = userResult.id;

  useEffect(() => {
    const fetchResults = async () => {
      try {
        const response = await axios.get(
          `http://localhost:5000/api/auth/user/${userId}`
        );
        setResults(response.data);
        console.log("Fetched results:", response.data);
      } catch (error) {
        console.error("Error fetching results:", error);
      }
    };

    fetchResults();
  }, [userId]);

  const generatePDF = () => {
    const doc = new jsPDF({ orientation: "landscape" });

    // Title at the center with reduced font size
    const title = `Ollato Mind Mapping Summary Report: ${userResult.name}`;
    doc.setFontSize(18); // Reduced font size for the title
    doc.text(title, doc.internal.pageSize.getWidth() / 2, 20, {
      align: "center",
    });

    // Define columns
    const columns = [
      "Domains",
      "Excellent",
      "Good",
      "Moderate",
      "Concern",
      "Danger",
      "Serious",
    ];

    const totalWidth = doc.internal.pageSize.getWidth();
    const colWidth = totalWidth / columns.length;
    let startY = 40; // Starting position

    // Draw headers with increased width for the background
    doc.setFontSize(14); // Reduced font size for headers
    doc.setFillColor(200, 200, 200);
    doc.rect(8, startY - 10, totalWidth - 12, 12, "F"); // Increased width by reducing margins
    doc.setTextColor(0);
    columns.forEach((col, index) => {
      doc.text(col, 8 + index * colWidth + colWidth / 2, startY, {
        align: "center",
      });
    });

    // Prepare data for PDF
    startY += 12; // Move down for the data rows

    const categories = {
      Excellent: [],
      Good: [],
      Moderate: [],
      Concern: [],
      Danger: [],
      Serious: [],
    };

    Object.entries(results).forEach(([domain, score]) => {
      doc.setTextColor(0);
      doc.text(domain, 10, startY, { align: "left" });

      // Determine the bar color and column index
      let barColor;
      let columnIndex;

      if (score >= 80) {
        barColor = [0, 255, 0]; // Green
        columnIndex = 1; // Excellent
        categories.Excellent.push(domain);
      } else if (score >= 60) {
        barColor = [144, 238, 144]; // Light Green
        columnIndex = 2; // Good
        categories.Good.push(domain);
      } else if (score >= 50) {
        barColor = [255, 255, 0]; // Yellow
        columnIndex = 3; // Moderate
        categories.Moderate.push(domain);
      } else if (score >= 40) {
        barColor = [211, 211, 211]; // Light Grey
        columnIndex = 4; // Concern
        categories.Concern.push(domain);
      } else {
        barColor = [255, 0, 0]; // Red
        columnIndex = 5; // Serious
        categories.Serious.push(domain);
      }

      // Draw the colored bar centered in the appropriate column
      const barX =
        10 + columnIndex * colWidth + (colWidth - colWidth * 0.4) / 2;
      doc.setFillColor(...barColor);
      doc.rect(barX, startY - 5, colWidth * 0.4, 5, "F"); // Reduced bar height

      startY += 12; // Reduced row height

      // Check for page overflow
      if (startY > doc.internal.pageSize.getHeight() - 30) {
        doc.addPage();
        startY = 20; // Reset y position on new page
      }
    });

    // Add a page break before categories
    doc.addPage();
    startY = 20;

    // Output categories and their domains
    doc.setFontSize(18).text("Categories:", 10, startY); // Reduced font size for categories
    startY += 10;
    Object.entries(categories).forEach(([category, domains]) => {
      doc.setFontSize(14).text(category, 10, startY);
      doc.text(domains.join(", ") || "None", 80, startY); // Adjusted x position for categories
      startY += 10;
    });

    // Add a footer section
    startY += 20;
    doc.setFontSize(14);
    doc.text("Generated by Ollato Mind Mapping", 10, startY);
    doc.text("Date: " + new Date().toLocaleDateString(), 10, startY + 10);

    // Save the PDF
    doc.save("summary_report.pdf");
  };

  return (
    <div className="min-h-screen flex flex-col">
      {/* Dashboard Header */}
      <DashboardHeader />

      {/* Main Dashboard Content */}
      <div className="flex flex-grow mt-20">
        {/* Sidebar */}
        <aside className="w-64 bg-gray-100 h-full overflow-y-auto p-4">
          <Sidebar />
        </aside>

        {/* Main Content */}
        <main className="flex-grow p-6">
          {/* Button positioned to the right of the sidebar */}
          <div className="flex justify-center pt-[200px]">
            <h1 className="text-2xl font-bold pr-4">
              Click to Download Your Report :)
            </h1>
            <button
              onClick={generatePDF}
              className="bg-blue-500 text-white px-4 py-2 rounded  text-xl ml-4"
            >
              Download Summary
            </button>
          </div>
        </main>
      </div>
    </div>
  );
};

export default DownloadSummary;
